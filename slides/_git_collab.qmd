# III- Le travail collaboratif avec Git

## Outils pour le travail collaboratif

- L'éco-système `Git` [**facilite** le travail collaboratif]{.blue2}
    - `Git` {{< fa brands git-alt >}} : modèle des [__branches__]{.orange}
    - `GitHub` {{< fa brands github >}} / `GitLab` {{< fa brands gitlab >}} : [**Issues**, **Merge Requests**, **Forks**]{.orange}

. . .

- Ces outils ne remplacent pas une [**bonne définition de l'organisation du travail**]{.orange} en équipe
    - Choix d'un *workflow* _(exemples : périmètre des "projets", conventions de nommage des branches, etc.)_
    - Droits d'accès
    - Règles de contribution

## Application 4 {.smaller}

{{< include applications_git/_application4a.qmd >}}

## Divergence d'historiques : cas simple

![](img/ff.png)

. . .

- Avec un `pull`, `Git` résout le problème via un [***fast-forward merge***]{.blue2}
    - `Git` crée un commit de _merge_ de l'historique distant dans le local 
    - _Nota bene_ : rend l'historique non linéaire 





## Divergence d'historiques : cas compliqué

![](img/divergence.png)

. . .

- `Git` ne peut pas résoudre de lui même la divergence.

. . .

- L'utilisateur doit résoudre le conflit

## Résoudre les conflits : l'interface RStudio

![](img/rstudio_conflit.png)

- Choisir la version à conserver  
- Supprimer les "marquages" du conflit  
- `Commit` et `push` les changements  

## Résoudre les conflits : l'interface Sublime Merge

::: columns

::: {.column width="50%"}
![](img/conflict_sublime_merge.png){ width=100% }
:::

::: {.column width="50%" style="font-size:22px;"}
- `OURS` (à gauche) = `MAIN` ou ce qui est sur le local 
- `THEIRS` (à droite) = `ORIGIN MAIN` ou ce qui est sur le repo distant  
- Au milieu la version qui sera gitée avec les conflits à arbitrer  
- Choisir la flèche de gauche pour conserver local `OURS` / celle de droite pour le distant `THEIRS`  
- `Commit` et `push` les changements
:::

:::

## Application 5 {.smaller}

{{< include applications_git/_application5.qmd >}}

<!-- ## 1ère possibilité : le *merge* -->

<!-- ![](img/merge.png) -->

<!-- . . . -->

<!-- - `Git` crée un [**commit de merge**]{.blue2} -->
<!--     - Comportement par défaut (jusqu'à récemment) -->

<!-- . . . -->

<!-- - [**Inconvénient**]{.orange} : rend l'[**historique non-linéaire**]{.blue2} ([plus d'explications](https://www.atlassian.com/fr/git/tutorials/using-branches/git-merge)) -->

<!-- ## 2ème possibilité : le *rebase* (1/2) -->

<!-- ![](img/rebase1.png) -->

<!-- . . . -->

<!-- - `Git` effectue 3 étapes -->
<!--     - Supprime temporairement le commit local -->
<!--     - Réalise un *fast-forward merge* -->
<!--     - Rajoute le commit local au bout de l'historique -->

<!-- ## 2ème possibilité : le *rebase* (2/2) -->

<!-- ![](img/rebase2.png) -->

<!-- . . . -->

<!-- - [**Avantage**]{.orange} : l'historique reste [**linéaire**]{.blue2} -->

<!-- . . . -->

<!-- - [**Attention**]{.orange} : ne jamais *rebase* des commits déjà poussés sur un dépôt public ([plus d'explications](https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Rebaser-Rebasing#s_rebase_peril)) -->

<!-- ## Application 4 (suite) {.smaller} -->

<!-- {{< include applications_git/_application4b.qmd >}} -->

<!-- ## Application 5 {.smaller} -->

<!-- {{< include applications_git/_application5.qmd >}} -->

## Le modèle des branches {auto-animate=true}

![](https://i.imgflip.com/4ooord.jpg){fig-align="center"}

## Le modèle des branches {auto-animate=true}

![](img/branches.png)

<!-- ## Exemple d'organisation : le *GitHub flow* -->

<!-- ![](img/ghflow.png) -->

<!-- Description plus détaillée : [ici](https://docs.github.com/en/get-started/quickstart/github-flow) -->


## Application 6 {.smaller}

{{< include applications_git/_application6.qmd >}}

<!-- ## Application 7 -->

<!-- {{< include applications_git/_application7.qmd >}} -->

<!-- ## Application 8 (bonus) -->

<!-- {{< include applications_git/_application8.qmd >}} -->
